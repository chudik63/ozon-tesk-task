// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "ozon-tesk-task/internal/transport/graph/model"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: ctx, comment
func (_m *Service) CreateComment(ctx context.Context, comment *model.Comment) (*model.Comment, error) {
	ret := _m.Called(ctx, comment)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Comment) (*model.Comment, error)); ok {
		return rf(ctx, comment)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Comment) *model.Comment); ok {
		r0 = rf(ctx, comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Comment) error); ok {
		r1 = rf(ctx, comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePost provides a mock function with given fields: ctx, post
func (_m *Service) CreatePost(ctx context.Context, post *model.Post) (*model.Post, error) {
	ret := _m.Called(ctx, post)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) (*model.Post, error)); ok {
		return rf(ctx, post)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.Post) *model.Post); ok {
		r0 = rf(ctx, post)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.Post) error); ok {
		r1 = rf(ctx, post)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePost provides a mock function with given fields: ctx, postId
func (_m *Service) DeletePost(ctx context.Context, postId int32) error {
	ret := _m.Called(ctx, postId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePost")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, postId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPostById provides a mock function with given fields: ctx, id, withComments
func (_m *Service) GetPostById(ctx context.Context, id int32, withComments bool) (*model.Post, error) {
	ret := _m.Called(ctx, id, withComments)

	if len(ret) == 0 {
		panic("no return value specified for GetPostById")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, bool) (*model.Post, error)); ok {
		return rf(ctx, id, withComments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, bool) *model.Post); ok {
		r0 = rf(ctx, id, withComments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, bool) error); ok {
		r1 = rf(ctx, id, withComments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPosts provides a mock function with given fields: ctx, limit, offset, withComments
func (_m *Service) ListPosts(ctx context.Context, limit int32, offset int32, withComments bool) ([]*model.Post, error) {
	ret := _m.Called(ctx, limit, offset, withComments)

	if len(ret) == 0 {
		panic("no return value specified for ListPosts")
	}

	var r0 []*model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, bool) ([]*model.Post, error)); ok {
		return rf(ctx, limit, offset, withComments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int32, int32, bool) []*model.Post); ok {
		r0 = rf(ctx, limit, offset, withComments)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int32, int32, bool) error); ok {
		r1 = rf(ctx, limit, offset, withComments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
