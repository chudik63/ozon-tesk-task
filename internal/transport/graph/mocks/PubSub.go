// Code generated by mockery v2.52.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	model "ozon-tesk-task/internal/transport/graph/model"
)

// PubSub is an autogenerated mock type for the PubSub type
type PubSub struct {
	mock.Mock
}

// Check provides a mock function with given fields: postId
func (_m *PubSub) Check(postId int32) bool {
	ret := _m.Called(postId)

	if len(ret) == 0 {
		panic("no return value specified for Check")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(int32) bool); ok {
		r0 = rf(postId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, comment
func (_m *PubSub) Publish(ctx context.Context, comment *model.Comment) {
	_m.Called(ctx, comment)
}

// Subscribe provides a mock function with given fields: ctx, postId
func (_m *PubSub) Subscribe(ctx context.Context, postId int32) <-chan *model.Comment {
	ret := _m.Called(ctx, postId)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan *model.Comment
	if rf, ok := ret.Get(0).(func(context.Context, int32) <-chan *model.Comment); ok {
		r0 = rf(ctx, postId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *model.Comment)
		}
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: ctx, postId, ch
func (_m *PubSub) Unsubscribe(ctx context.Context, postId int32, ch chan *model.Comment) {
	_m.Called(ctx, postId, ch)
}

// NewPubSub creates a new instance of PubSub. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPubSub(t interface {
	mock.TestingT
	Cleanup(func())
}) *PubSub {
	mock := &PubSub{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
