package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.64

import (
	"context"
	"errors"
	"fmt"
	"net/http"
	"ozon-tesk-task/internal/repository"
	"ozon-tesk-task/internal/transport/graph/model"

	"github.com/vektah/gqlparser/v2/gqlerror"
	"go.uber.org/zap"
)

const (
	defaultLimit  = int32(10)
	defaultOffset = int32(0)
)

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, allowComments bool) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: CreatePost - createPost"))
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, postID string, parentID *string, content string) (*model.Comment, error) {
	panic(fmt.Errorf("not implemented: CreateComment - createComment"))
}

// Posts is the resolver for the posts field.
func (r *queryResolver) Posts(ctx context.Context, limit *int32, offset *int32) ([]*model.Post, error) {
	if limit == nil {
		limit = new(int32)
		*limit = defaultLimit
	}
	if offset == nil {
		offset = new(int32)
		*offset = defaultOffset
	}

	posts, err := r.service.ListPosts(ctx, *limit, *offset)
	if err != nil {
		if errors.Is(err, repository.ErrNotFound) {
			r.logs.Info(ctx, "can`t list posts", zap.String("err", err.Error()))
			return nil, &gqlerror.Error{
				Err: err,
				Extensions: map[string]interface{}{
					"code": http.StatusNotFound,
				},
			}
		}

		r.logs.Error(ctx, "failed to list posts", zap.String("err", err.Error()))
		return nil, &gqlerror.Error{
			Err: err,
			Extensions: map[string]interface{}{
				"code": http.StatusInternalServerError,
			},
		}
	}

	return posts, nil
}

// Post is the resolver for the post field.
func (r *queryResolver) Post(ctx context.Context, id string) (*model.Post, error) {
	panic(fmt.Errorf("not implemented: Post - post"))
}

// CommentAdded is the resolver for the commentAdded field.
func (r *subscriptionResolver) CommentAdded(ctx context.Context, postID string) (<-chan *model.Comment, error) {
	panic(fmt.Errorf("not implemented: CommentAdded - commentAdded"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
